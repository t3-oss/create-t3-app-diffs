diff --git a/.env-example b/.env.example
similarity index 91%
rename from .env-example
rename to .env.example
index b0c4cad..dbeac89 100644
--- a/.env-example
+++ b/.env.example
@@ -1,11 +1,10 @@
-# Since .env is gitignored, you can use .env-example to build a new `.env` file when you clone the repo.
+# Since .env is gitignored, you can use .env.example to build a new `.env` file when you clone the repo.
 # Keep this file up-to-date when you add new variables to `.env`.
 
 # This file will be committed to version control, so make sure not to have any secrets in it.
 # If you are cloning this repo, create a copy of this file named `.env` and populate it with your secrets.
 
 # When adding additional env variables, the schema in /env/schema.mjs should be updated accordingly
-
 # Next Auth
 # You can generate the secret via 'openssl rand -base64 32' on Linux
 # More info: https://next-auth.js.org/configuration/options#secret
diff --git a/.eslintrc.json b/.eslintrc.json
index 4cc0a95..82671df 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -1,4 +1,15 @@
 {
+  "overrides": [
+    {
+      "extends": [
+        "plugin:@typescript-eslint/recommended-requiring-type-checking"
+      ],
+      "files": ["*.ts", "*.tsx"],
+      "parserOptions": {
+        "project": "tsconfig.json"
+      }
+    }
+  ],
   "parser": "@typescript-eslint/parser",
   "parserOptions": {
     "project": "./tsconfig.json"
diff --git a/.gitignore b/.gitignore
index d9bbc5d..2971a0b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@
 # next.js
 /.next/
 /out/
+next-env.d.ts
 
 # production
 /build
@@ -30,6 +31,7 @@ yarn-error.log*
 .pnpm-debug.log*
 
 # local env files
+# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
 .env
 .env*.local
 
diff --git a/README.md b/README.md
index d7c5b20..fba19ed 100644
--- a/README.md
+++ b/README.md
@@ -1,27 +1,28 @@
 # Create T3 App
 
-This is an app bootstrapped according to the [init.tips](https://init.tips) stack, also known as the T3-Stack.
+This is a [T3 Stack](https://create.t3.gg/) project bootstrapped with `create-t3-app`.
 
 ## What's next? How do I make an app with this?
 
-We try to keep this project as simple as possible, so you can start with the most basic configuration and then move on to more advanced configuration.
+We try to keep this project as simple as possible, so you can start with just the scaffolding we set up for you, and add additional things later when they become necessary.
 
 If you are not familiar with the different technologies used in this project, please refer to the respective docs. If you still are in the wind, please join our [Discord](https://t3.gg/discord) and ask for help.
 
-- [Next-Auth.js](https://next-auth.js.org)
+- [Next.js](https://nextjs.org)
+- [NextAuth.js](https://next-auth.js.org)
 - [Prisma](https://prisma.io)
-- [TailwindCSS](https://tailwindcss.com)
+- [Tailwind CSS](https://tailwindcss.com)
 - [tRPC](https://trpc.io)
 
-We also [roll our own docs](https://beta.create.t3.gg) with some summary information and links to the respective documentation.
+## Learn More
 
-Also checkout these awesome tutorials on `create-t3-app`.
+To learn more about the [T3 Stack](https://create.t3.gg/), take a look at the following resources:
 
-- [Build a Blog With the T3 Stack - tRPC, TypeScript, Next.js, Prisma & Zod](https://www.youtube.com/watch?v=syEWlxVFUrY)
-- [Build a Live Chat Application with the T3 Stack - TypeScript, Tailwind, tRPC](https://www.youtube.com/watch?v=dXRRY37MPuk)
-- [Build a full stack app with create-t3-app](https://www.nexxel.dev/blog/ct3a-guestbook)
-- [A first look at create-t3-app](https://dev.to/ajcwebdev/a-first-look-at-create-t3-app-1i8f)
+- [Documentation](https://create.t3.gg/)
+- [Learn the T3 Stack](https://create.t3.gg/en/faq#what-learning-resources-are-currently-available) — Check out these awesome tutorials
+
+You can check out the [create-t3-app GitHub repository](https://github.com/t3-oss/create-t3-app) — your feedback and contributions are welcome!
 
 ## How do I deploy this?
 
-Follow our deployment guides for [Vercel](https://beta.create.t3.gg/en/deployment/vercel) and [Docker](https://beta.create.t3.gg/en/deployment/docker) for more information.
+Follow our deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel), [Netlify](https://create.t3.gg/en/deployment/netlify) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.
diff --git a/package.json b/package.json
index cedc7fd..a09e584 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "current",
+  "name": "upgrade",
   "version": "0.1.0",
   "private": true,
   "scripts": {
@@ -9,29 +9,29 @@
     "start": "next start"
   },
   "dependencies": {
-    "@tanstack/react-query": "^4.10.0",
-    "@trpc/client": "10.0.0-rc.4",
-    "@trpc/next": "10.0.0-rc.4",
-    "@trpc/react-query": "10.0.0-rc.4",
-    "@trpc/server": "10.0.0-rc.4",
-    "next": "13.0.2",
-    "next-auth": "^4.15.1",
+    "@tanstack/react-query": "^4.20.0",
+    "@trpc/client": "^10.7.0",
+    "@trpc/next": "^10.7.0",
+    "@trpc/react-query": "^10.7.0",
+    "@trpc/server": "^10.7.0",
+    "next": "13.1.1",
+    "next-auth": "^4.18.7",
     "react": "18.2.0",
     "react-dom": "18.2.0",
     "superjson": "1.9.1",
-    "zod": "^3.18.0"
+    "zod": "^3.20.2"
   },
   "devDependencies": {
-    "@types/node": "^18.0.0",
-    "@types/react": "^18.0.14",
-    "@types/react-dom": "^18.0.5",
-    "@typescript-eslint/eslint-plugin": "^5.33.0",
-    "@typescript-eslint/parser": "^5.33.0",
-    "eslint": "^8.26.0",
-    "eslint-config-next": "13.0.2",
-    "typescript": "^4.8.4"
+    "@types/node": "^18.11.18",
+    "@types/react": "^18.0.26",
+    "@types/react-dom": "^18.0.10",
+    "@typescript-eslint/eslint-plugin": "^5.47.1",
+    "@typescript-eslint/parser": "^5.47.1",
+    "eslint": "^8.30.0",
+    "eslint-config-next": "13.1.1",
+    "typescript": "^4.9.4"
   },
   "ct3aMetadata": {
-    "initVersion": "6.8.1"
+    "initVersion": "7.1.0"
   }
 }
diff --git a/src/env/schema.mjs b/src/env/schema.mjs
index 1a4d09f..cd0e268 100644
--- a/src/env/schema.mjs
+++ b/src/env/schema.mjs
@@ -13,9 +13,9 @@ export const serverSchema = z.object({
       : z.string().min(1).optional(),
   NEXTAUTH_URL: z.preprocess(
     // This makes Vercel deployments not fail if you don't set NEXTAUTH_URL
-    // Since NextAuth automatically uses the VERCEL_URL if present.
+    // Since NextAuth.js automatically uses the VERCEL_URL if present.
     (str) => process.env.VERCEL_URL ?? str,
-    // VERCEL_URL doesnt include `https` so it cant be validated as a URL
+    // VERCEL_URL doesn't include `https` so it cant be validated as a URL
     process.env.VERCEL ? z.string() : z.string().url(),
   ),
   DISCORD_CLIENT_ID: z.string(),
@@ -28,7 +28,7 @@ export const serverSchema = z.object({
  * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
  */
 export const clientSchema = z.object({
-  // NEXT_PUBLIC_BAR: z.string(),
+  // NEXT_PUBLIC_CLIENTVAR: z.string(),
 });
 
 /**
@@ -38,5 +38,5 @@ export const clientSchema = z.object({
  * @type {{ [k in keyof z.infer<typeof clientSchema>]: z.infer<typeof clientSchema>[k] | undefined }}
  */
 export const clientEnv = {
-  // NEXT_PUBLIC_BAR: process.env.NEXT_PUBLIC_BAR,
+  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
 };
diff --git a/src/pages/_app.tsx b/src/pages/_app.tsx
index 2e2d750..2a46c68 100644
--- a/src/pages/_app.tsx
+++ b/src/pages/_app.tsx
@@ -2,7 +2,7 @@ import { type AppType } from "next/app";
 import { type Session } from "next-auth";
 import { SessionProvider } from "next-auth/react";
 
-import { trpc } from "../utils/trpc";
+import { api } from "../utils/api";
 
 import "../styles/globals.css";
 
@@ -17,4 +17,4 @@ const MyApp: AppType<{ session: Session | null }> = ({
   );
 };
 
-export default trpc.withTRPC(MyApp);
+export default api.withTRPC(MyApp);
diff --git a/src/pages/api/auth/[...nextauth].ts b/src/pages/api/auth/[...nextauth].ts
index 396fc10..d317154 100644
--- a/src/pages/api/auth/[...nextauth].ts
+++ b/src/pages/api/auth/[...nextauth].ts
@@ -19,7 +19,15 @@ export const authOptions: NextAuthOptions = {
       clientId: env.DISCORD_CLIENT_ID,
       clientSecret: env.DISCORD_CLIENT_SECRET,
     }),
-    // ...add more providers here
+    /**
+     * ...add more providers here
+     *
+     * Most other providers require a bit more work than the Discord provider.
+     * For example, the GitHub provider requires you to add the
+     * `refresh_token_expires_in` field to the Account model. Refer to the
+     * NextAuth.js docs for the provider you want to use. Example:
+     * @see https://next-auth.js.org/providers/github
+     */
   ],
 };
 
diff --git a/src/pages/api/restricted.ts b/src/pages/api/restricted.ts
deleted file mode 100644
index 39d936d..0000000
--- a/src/pages/api/restricted.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import { type NextApiRequest, type NextApiResponse } from "next";
-
-import { getServerAuthSession } from "../../server/common/get-server-auth-session";
-
-const restricted = async (req: NextApiRequest, res: NextApiResponse) => {
-  const session = await getServerAuthSession({ req, res });
-
-  if (session) {
-    res.send({
-      content:
-        "This is protected content. You can access this content because you are signed in.",
-    });
-  } else {
-    res.send({
-      error:
-        "You must be signed in to view the protected content on this page.",
-    });
-  }
-};
-
-export default restricted;
diff --git a/src/pages/api/trpc/[trpc].ts b/src/pages/api/trpc/[trpc].ts
index f69201d..8ec828b 100644
--- a/src/pages/api/trpc/[trpc].ts
+++ b/src/pages/api/trpc/[trpc].ts
@@ -1,17 +1,19 @@
 import { createNextApiHandler } from "@trpc/server/adapters/next";
 
 import { env } from "../../../env/server.mjs";
-import { createContext } from "../../../server/trpc/context";
-import { appRouter } from "../../../server/trpc/router/_app";
+import { createTRPCContext } from "../../../server/api/trpc";
+import { appRouter } from "../../../server/api/root";
 
 // export API handler
 export default createNextApiHandler({
   router: appRouter,
-  createContext,
+  createContext: createTRPCContext,
   onError:
     env.NODE_ENV === "development"
       ? ({ path, error }) => {
-          console.error(`❌ tRPC failed on ${path}: ${error}`);
+          console.error(
+            `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
+          );
         }
       : undefined,
 });
diff --git a/src/pages/index.module.css b/src/pages/index.module.css
index 4fc3217..d9caeea 100644
--- a/src/pages/index.module.css
+++ b/src/pages/index.module.css
@@ -1,196 +1,149 @@
-.containerOuter {
-  --color-gray-500: rgba(107, 114, 128, 100%);
-  --color-gray-600: rgba(75, 85, 99, 100%);
-  --color-gray-700: rgba(55, 65, 81, 100%);
-  --color-purple-300: rgba(216, 180, 254, 100%);
-  --color-blue-500: rgba(59, 130, 246, 100%);
-  --color-violet-500: rgba(139, 92, 246, 100%);
-  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1),
-    0 8px 10px -6px rgb(0 0 0 / 0.1);
-
+.main {
   display: flex;
+  flex-direction: column;
   align-items: center;
   justify-content: center;
-  width: 100vw;
   min-height: 100vh;
+  background-image: linear-gradient(to bottom, #2e026d, #15162c);
 }
 
-.containerInner {
+.container {
   width: 100%;
-  min-height: 100vh;
-  padding: 16px;
   display: flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;
-  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
-    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,
-    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
+  gap: 3rem;
+  padding: 4rem 1rem;
 }
 
 @media (min-width: 640px) {
-  .containerInner {
+  .container {
     max-width: 640px;
   }
 }
 
 @media (min-width: 768px) {
-  .containerInner {
+  .container {
     max-width: 768px;
   }
 }
 
 @media (min-width: 1024px) {
-  .containerInner {
+  .container {
     max-width: 1024px;
   }
 }
 
 @media (min-width: 1280px) {
-  .containerInner {
+  .container {
     max-width: 1280px;
   }
 }
 
 @media (min-width: 1536px) {
-  .containerInner {
+  .container {
     max-width: 1536px;
   }
 }
 
 .title {
-  margin: 0;
   font-size: 3rem;
+  line-height: 1;
   font-weight: 800;
-  line-height: 1.5;
-  color: var(--color-gray-700);
+  letter-spacing: -0.025em;
+  margin: 0;
+  color: white;
 }
 
-@media (min-width: 768px) {
+@media (min-width: 640px) {
   .title {
     font-size: 5rem;
   }
 }
 
-.titlePink {
-  color: var(--color-purple-300);
-}
-
-.subtitle {
-  margin: 0;
-  color: var(--color-gray-700);
-  font-weight: 400;
-  font-size: 1.5rem;
-  line-height: 2rem;
+.pinkSpan {
+  color: hsl(280 100% 70%);
 }
 
-.cardGrid {
+.cardRow {
   display: grid;
-  gap: 0.75rem;
-  padding-top: 0.75rem;
-  margin-top: 0.75rem;
-  text-align: center;
+  grid-template-columns: repeat(1, minmax(0, 1fr));
+  gap: 1rem;
 }
 
-@media (min-width: 768px) {
-  .cardGrid {
+@media (min-width: 640px) {
+  .cardRow {
     grid-template-columns: repeat(2, minmax(0, 1fr));
   }
 }
 
-@media (min-width: 1024px) {
-  .cardGrid {
-    width: calc(200% / 3);
+@media (min-width: 768px) {
+  .cardRow {
+    gap: 2rem;
   }
 }
 
 .card {
+  max-width: 20rem;
   display: flex;
   flex-direction: column;
-  justify-content: center;
-  padding: 1.5rem;
-  transition-duration: 500ms;
-  border: 2px solid var(--color-gray-500);
-  border-radius: 0.25rem;
-  box-shadow: var(--tw-shadow);
+  gap: 1rem;
+  padding: 1rem;
+  border-radius: 0.75rem;
+  color: white;
+  background-color: rgb(255 255 255 / 0.1);
 }
 
 .card:hover {
-  transform: scale(1.05);
-}
-
-@media (prefers-reduced-motion) {
-  .card:hover {
-    transform: none;
-  }
+  background-color: rgb(255 255 255 / 0.2);
+  transition: background-color 150ms cubic-bezier(0.5, 0, 0.2, 1);
 }
 
 .cardTitle {
+  font-size: 1.5rem;
+  line-height: 2rem;
+  font-weight: 700;
   margin: 0;
-  font-size: 1.125rem;
-  line-height: 1.75rem;
-  font-weight: 400;
-  color: var(--color-gray-500);
-}
-
-.cardDescription {
-  margin: 0;
-  font-size: 0.875rem;
-  line-height: 1.25rem;
-  color: var(--color-gray-600);
 }
 
-.cardDocumentation {
-  margin-top: 0.75rem;
-  font-size: 0.875rem;
-  line-height: 1.25rem;
-  text-decoration-line: underline;
-  -webkit-text-decoration-line: underline;
-  text-decoration-style: dotted;
-  -webkit-text-decoration-style: dotted;
-  text-underline-offset: 2px;
-  color: var(--color-violet-500);
+.cardText {
+  font-size: 1.125rem;
+  line-height: 1.75rem;
 }
 
-.helloFrom {
-  padding-top: 1.5rem;
-  font-size: 1.5rem;
-  line-height: 2rem;
-  color: var(--color-blue-500);
+.showcaseContainer {
   display: flex;
+  flex-direction: column;
   align-items: center;
-  justify-content: center;
-  width: 100%;
+  gap: 0.5rem;
 }
 
-.helloFrom p {
-  margin: 0;
+.showcaseText {
+  color: white;
+  text-align: center;
+  font-size: 1.5rem;
+  line-height: 2rem;
 }
 
-.authShowcase {
-  margin: 2rem;
+.authContainer {
   display: flex;
   flex-direction: column;
   align-items: center;
-  gap: 16px;
-}
-
-.loginInfo {
-  color: var(--color-blue-500);
-  font-size: 1.5rem;
-  line-height: 2rem;
+  justify-content: center;
+  gap: 1rem;
 }
 
-.signInButton {
-  padding: 0.5rem 1rem;
-  border: 1px solid black;
-  background-color: rgba(245, 243, 255, 100%);
-  font-size: 1.25rem;
-  line-height: 1.75rem;
-  border-radius: 0.375rem;
-  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
+.loginButton {
+  border-radius: 9999px;
+  background-color: rgb(255 255 255 / 0.1);
+  padding: 0.75rem 2.5rem;
+  font-weight: 600;
+  color: white;
+  text-decoration-line: none;
+  transition: background-color 150ms cubic-bezier(0.5, 0, 0.2, 1);
 }
 
-.signInButton:hover {
-  background-color: rgba(237, 233, 254, 100%);
+.loginButton:hover {
+  background-color: rgb(255 255 255 / 0.2);
 }
diff --git a/src/pages/index.tsx b/src/pages/index.tsx
index 56e8448..adcaac7 100644
--- a/src/pages/index.tsx
+++ b/src/pages/index.tsx
@@ -1,14 +1,13 @@
+import styles from "./index.module.css";
 import { type NextPage } from "next";
 import Head from "next/head";
 import Link from "next/link";
 import { signIn, signOut, useSession } from "next-auth/react";
 
-import { trpc } from "../utils/trpc";
-
-import styles from "./index.module.css";
+import { api } from "../utils/api";
 
 const Home: NextPage = () => {
-  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
+  const hello = api.example.hello.useQuery({ text: "from tRPC" });
 
   return (
     <>
@@ -17,51 +16,43 @@ const Home: NextPage = () => {
         <meta name="description" content="Generated by create-t3-app" />
         <link rel="icon" href="/favicon.ico" />
       </Head>
-      <div className={styles.containerOuter}>
-        <div className={styles.containerInner}>
+      <main className={styles.main}>
+        <div className={styles.container}>
           <h1 className={styles.title}>
-            Create <span className={styles.titlePink}>T3</span> App
+            Create <span className={styles.pinkSpan}>T3</span> App
           </h1>
-
-          <h3 className={styles.subtitle}>This stack uses:</h3>
-          <div className={styles.cardGrid}>
-            <TechnologyCard
-              name="NextJS"
-              description="The React framework for production"
-              documentation="https://nextjs.org/"
-            />
-            <TechnologyCard
-              name="TypeScript"
-              description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
-              documentation="https://www.typescriptlang.org/"
-            />
-            <TechnologyCard
-              name="TailwindCSS"
-              description="Rapidly build modern websites without ever leaving your HTML"
-              documentation="https://tailwindcss.com/"
-            />
-            <TechnologyCard
-              name="tRPC"
-              description="End-to-end typesafe APIs made easy"
-              documentation="https://trpc.io/"
-            />
-            <TechnologyCard
-              name="Next-Auth"
-              description="Authentication for Next.js"
-              documentation="https://next-auth.js.org/"
-            />
-            <TechnologyCard
-              name="Prisma"
-              description="Build data-driven JavaScript & TypeScript apps in less time"
-              documentation="https://www.prisma.io/docs/"
-            />
+          <div className={styles.cardRow}>
+            <Link
+              className={styles.card}
+              href="https://create.t3.gg/en/usage/first-steps"
+              target="_blank"
+            >
+              <h3 className={styles.cardTitle}>First Steps →</h3>
+              <div className={styles.cardText}>
+                Just the basics - Everything you need to know to set up your
+                database and authentication.
+              </div>
+            </Link>
+            <Link
+              className={styles.card}
+              href="https://create.t3.gg/en/introduction"
+              target="_blank"
+            >
+              <h3 className={styles.cardTitle}>Documentation →</h3>
+              <div className={styles.cardText}>
+                Learn more about Create T3 App, the libraries it uses, and how
+                to deploy it.
+              </div>
+            </Link>
           </div>
-          <div className={styles.helloFrom}>
-            {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading...</p>}
+          <div className={styles.showcaseContainer}>
+            <p className={styles.showcaseText}>
+              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
+            </p>
+            <AuthShowcase />
           </div>
-          <AuthShowcase />
         </div>
-      </div>
+      </main>
     </>
   );
 };
@@ -71,48 +62,23 @@ export default Home;
 const AuthShowcase: React.FC = () => {
   const { data: sessionData } = useSession();
 
-  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
+  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
     undefined, // no input
     { enabled: sessionData?.user !== undefined },
   );
 
   return (
-    <div className={styles.authShowcase}>
-      {sessionData && <p>Logged in as {sessionData?.user?.name}</p>}
-      {secretMessage && <p>{secretMessage}</p>}
+    <div className={styles.authContainer}>
+      <p className={styles.showcaseText}>
+        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
+        {secretMessage && <span> - {secretMessage}</span>}
+      </p>
       <button
-        className={styles.signInButton}
-        onClick={sessionData ? () => signOut() : () => signIn()}
+        className={styles.loginButton}
+        onClick={sessionData ? () => void signOut() : () => void signIn()}
       >
         {sessionData ? "Sign out" : "Sign in"}
       </button>
     </div>
   );
 };
-
-type TechnologyCardProps = {
-  name: string;
-  description: string;
-  documentation: string;
-};
-
-const TechnologyCard: React.FC<TechnologyCardProps> = ({
-  name,
-  description,
-  documentation,
-}) => {
-  return (
-    <section className={styles.card}>
-      <h2 className={styles.cardTitle}>{name}</h2>
-      <p className={styles.cardDescription}>{description}</p>
-      <Link
-        className={styles.cardDocumentation}
-        href={documentation}
-        target="_blank"
-        rel="noreferrer"
-      >
-        Documentation
-      </Link>
-    </section>
-  );
-};
diff --git a/src/server/api/root.ts b/src/server/api/root.ts
new file mode 100644
index 0000000..c3f288e
--- /dev/null
+++ b/src/server/api/root.ts
@@ -0,0 +1,14 @@
+import { createTRPCRouter } from "./trpc";
+import { exampleRouter } from "./routers/example";
+
+/**
+ * This is the primary router for your server.
+ *
+ * All routers added in /api/routers should be manually added here
+ */
+export const appRouter = createTRPCRouter({
+  example: exampleRouter,
+});
+
+// export type definition of API
+export type AppRouter = typeof appRouter;
diff --git a/src/server/api/routers/example.ts b/src/server/api/routers/example.ts
new file mode 100644
index 0000000..30559f2
--- /dev/null
+++ b/src/server/api/routers/example.ts
@@ -0,0 +1,17 @@
+import { z } from "zod";
+
+import { createTRPCRouter, publicProcedure, protectedProcedure } from "../trpc";
+
+export const exampleRouter = createTRPCRouter({
+  hello: publicProcedure
+    .input(z.object({ text: z.string() }))
+    .query(({ input }) => {
+      return {
+        greeting: `Hello ${input.text}`,
+      };
+    }),
+
+  getSecretMessage: protectedProcedure.query(() => {
+    return "you can now see this secret message!";
+  }),
+});
diff --git a/src/server/api/trpc.ts b/src/server/api/trpc.ts
new file mode 100644
index 0000000..0b95612
--- /dev/null
+++ b/src/server/api/trpc.ts
@@ -0,0 +1,124 @@
+/**
+ * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
+ * 1. You want to modify request context (see Part 1)
+ * 2. You want to create a new middleware or type of procedure (see Part 3)
+ *
+ * tl;dr - this is where all the tRPC server stuff is created and plugged in.
+ * The pieces you will need to use are documented accordingly near the end
+ */
+
+/**
+ * 1. CONTEXT
+ *
+ * This section defines the "contexts" that are available in the backend API
+ *
+ * These allow you to access things like the database, the session, etc, when
+ * processing a request
+ *
+ */
+import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
+import { type Session } from "next-auth";
+
+import { getServerAuthSession } from "../auth";
+
+type CreateContextOptions = {
+  session: Session | null;
+};
+
+/**
+ * This helper generates the "internals" for a tRPC context. If you need to use
+ * it, you can export it from here
+ *
+ * Examples of things you may need it for:
+ * - testing, so we dont have to mock Next.js' req/res
+ * - trpc's `createSSGHelpers` where we don't have req/res
+ * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
+ */
+const createInnerTRPCContext = (opts: CreateContextOptions) => {
+  return {
+    session: opts.session,
+  };
+};
+
+/**
+ * This is the actual context you'll use in your router. It will be used to
+ * process every request that goes through your tRPC endpoint
+ * @link https://trpc.io/docs/context
+ */
+export const createTRPCContext = async (opts: CreateNextContextOptions) => {
+  const { req, res } = opts;
+
+  // Get the session from the server using the unstable_getServerSession wrapper function
+  const session = await getServerAuthSession({ req, res });
+
+  return createInnerTRPCContext({
+    session,
+  });
+};
+
+/**
+ * 2. INITIALIZATION
+ *
+ * This is where the trpc api is initialized, connecting the context and
+ * transformer
+ */
+import { initTRPC, TRPCError } from "@trpc/server";
+import superjson from "superjson";
+
+const t = initTRPC
+  .context<Awaited<ReturnType<typeof createTRPCContext>>>()
+  .create({
+    transformer: superjson,
+    errorFormatter({ shape }) {
+      return shape;
+    },
+  });
+
+/**
+ * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
+ *
+ * These are the pieces you use to build your tRPC API. You should import these
+ * a lot in the /src/server/api/routers folder
+ */
+
+/**
+ * This is how you create new routers and subrouters in your tRPC API
+ * @see https://trpc.io/docs/router
+ */
+export const createTRPCRouter = t.router;
+
+/**
+ * Public (unauthed) procedure
+ *
+ * This is the base piece you use to build new queries and mutations on your
+ * tRPC API. It does not guarantee that a user querying is authorized, but you
+ * can still access user session data if they are logged in
+ */
+export const publicProcedure = t.procedure;
+
+/**
+ * Reusable middleware that enforces users are logged in before running the
+ * procedure
+ */
+const enforceUserIsAuthed = t.middleware(({ ctx, next }) => {
+  if (!ctx.session || !ctx.session.user) {
+    throw new TRPCError({ code: "UNAUTHORIZED" });
+  }
+  return next({
+    ctx: {
+      // infers the `session` as non-nullable
+      session: { ...ctx.session, user: ctx.session.user },
+    },
+  });
+});
+
+/**
+ * Protected (authed) procedure
+ *
+ * If you want a query or mutation to ONLY be accessible to logged in users, use
+ * this. It verifies the session is valid and guarantees ctx.session.user is not
+ * null
+ *
+ * @see https://trpc.io/docs/procedures
+ */
+export const protectedProcedure = t.procedure.use(enforceUserIsAuthed);
diff --git a/src/server/auth.ts b/src/server/auth.ts
new file mode 100644
index 0000000..a99fdae
--- /dev/null
+++ b/src/server/auth.ts
@@ -0,0 +1,21 @@
+import { type GetServerSidePropsContext } from "next";
+import { unstable_getServerSession } from "next-auth";
+
+import { authOptions } from "../pages/api/auth/[...nextauth]";
+
+/**
+ * Wrapper for unstable_getServerSession, used in trpc createContext and the
+ * restricted API route
+ *
+ * Don't worry too much about the "unstable", it's safe to use but the syntax
+ * may change in future versions
+ *
+ * @see https://next-auth.js.org/configuration/nextjs
+ */
+
+export const getServerAuthSession = async (ctx: {
+  req: GetServerSidePropsContext["req"];
+  res: GetServerSidePropsContext["res"];
+}) => {
+  return await unstable_getServerSession(ctx.req, ctx.res, authOptions);
+};
diff --git a/src/server/common/get-server-auth-session.ts b/src/server/common/get-server-auth-session.ts
deleted file mode 100644
index 8323ff2..0000000
--- a/src/server/common/get-server-auth-session.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { type GetServerSidePropsContext } from "next";
-import { unstable_getServerSession } from "next-auth";
-import { authOptions } from "../../pages/api/auth/[...nextauth]";
-
-/**
- * Wrapper for unstable_getServerSession https://next-auth.js.org/configuration/nextjs
- * See example usage in trpc createContext or the restricted API route
- */
-export const getServerAuthSession = async (ctx: {
-  req: GetServerSidePropsContext["req"];
-  res: GetServerSidePropsContext["res"];
-}) => {
-  return await unstable_getServerSession(ctx.req, ctx.res, authOptions);
-};
diff --git a/src/server/trpc/context.ts b/src/server/trpc/context.ts
deleted file mode 100644
index 96a3c1d..0000000
--- a/src/server/trpc/context.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-import { type inferAsyncReturnType } from "@trpc/server";
-import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
-import { type Session } from "next-auth";
-
-import { getServerAuthSession } from "../common/get-server-auth-session";
-
-type CreateContextOptions = {
-  session: Session | null;
-};
-
-/** Use this helper for:
- * - testing, so we dont have to mock Next.js' req/res
- * - trpc's `createSSGHelpers` where we don't have req/res
- * @see https://beta.create.t3.gg/en/usage/trpc#-servertrpccontextts
- **/
-export const createContextInner = async (opts: CreateContextOptions) => {
-  return {
-    session: opts.session,
-  };
-};
-
-/**
- * This is the actual context you'll use in your router
- * @link https://trpc.io/docs/context
- **/
-export const createContext = async (opts: CreateNextContextOptions) => {
-  const { req, res } = opts;
-
-  // Get the session from the server using the unstable_getServerSession wrapper function
-  const session = await getServerAuthSession({ req, res });
-
-  return await createContextInner({
-    session,
-  });
-};
-
-export type Context = inferAsyncReturnType<typeof createContext>;
diff --git a/src/server/trpc/router/_app.ts b/src/server/trpc/router/_app.ts
deleted file mode 100644
index 0316694..0000000
--- a/src/server/trpc/router/_app.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import { router } from "../trpc";
-import { authRouter } from "./auth";
-import { exampleRouter } from "./example";
-
-export const appRouter = router({
-  example: exampleRouter,
-  auth: authRouter,
-});
-
-// export type definition of API
-export type AppRouter = typeof appRouter;
diff --git a/src/server/trpc/router/auth.ts b/src/server/trpc/router/auth.ts
deleted file mode 100644
index cb56bea..0000000
--- a/src/server/trpc/router/auth.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { router, publicProcedure, protectedProcedure } from "../trpc";
-
-export const authRouter = router({
-  getSession: publicProcedure.query(({ ctx }) => {
-    return ctx.session;
-  }),
-  getSecretMessage: protectedProcedure.query(() => {
-    return "You are logged in and can see this secret message!";
-  }),
-});
diff --git a/src/server/trpc/router/example.ts b/src/server/trpc/router/example.ts
deleted file mode 100644
index 086a723..0000000
--- a/src/server/trpc/router/example.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { z } from "zod";
-
-import { router, publicProcedure } from "../trpc";
-
-export const exampleRouter = router({
-  hello: publicProcedure
-    .input(z.object({ text: z.string().nullish() }).nullish())
-    .query(({ input }) => {
-      return {
-        greeting: `Hello ${input?.text ?? "world"}`,
-      };
-    }),
-});
diff --git a/src/server/trpc/trpc.ts b/src/server/trpc/trpc.ts
deleted file mode 100644
index 7c80f44..0000000
--- a/src/server/trpc/trpc.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { initTRPC, TRPCError } from "@trpc/server";
-import superjson from "superjson";
-
-import { type Context } from "./context";
-
-const t = initTRPC.context<Context>().create({
-  transformer: superjson,
-  errorFormatter({ shape }) {
-    return shape;
-  },
-});
-
-export const router = t.router;
-
-/**
- * Unprotected procedure
- **/
-export const publicProcedure = t.procedure;
-
-/**
- * Reusable middleware to ensure
- * users are logged in
- */
-const isAuthed = t.middleware(({ ctx, next }) => {
-  if (!ctx.session || !ctx.session.user) {
-    throw new TRPCError({ code: "UNAUTHORIZED" });
-  }
-  return next({
-    ctx: {
-      // infers the `session` as non-nullable
-      session: { ...ctx.session, user: ctx.session.user },
-    },
-  });
-});
-
-/**
- * Protected procedure
- **/
-export const protectedProcedure = t.procedure.use(isAuthed);
diff --git a/src/utils/trpc.ts b/src/utils/api.ts
similarity index 59%
rename from src/utils/trpc.ts
rename to src/utils/api.ts
index 2391cbc..c99a366 100644
--- a/src/utils/trpc.ts
+++ b/src/utils/api.ts
@@ -1,9 +1,16 @@
+/**
+ * This is the client-side entrypoint for your tRPC API.
+ * It's used to create the `api` object which contains the Next.js App-wrapper
+ * as well as your typesafe react-query hooks.
+ *
+ * We also create a few inference helpers for input and output types
+ */
 import { httpBatchLink, loggerLink } from "@trpc/client";
 import { createTRPCNext } from "@trpc/next";
 import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
 import superjson from "superjson";
 
-import { type AppRouter } from "../server/trpc/router/_app";
+import { type AppRouter } from "../server/api/root";
 
 const getBaseUrl = () => {
   if (typeof window !== "undefined") return ""; // browser should use relative url
@@ -11,10 +18,22 @@ const getBaseUrl = () => {
   return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
 };
 
-export const trpc = createTRPCNext<AppRouter>({
+/**
+ * A set of typesafe react-query hooks for your tRPC API
+ */
+export const api = createTRPCNext<AppRouter>({
   config() {
     return {
+      /**
+       * Transformer used for data de-serialization from the server
+       * @see https://trpc.io/docs/data-transformers
+       **/
       transformer: superjson,
+
+      /**
+       * Links used to determine request flow from client to server
+       * @see https://trpc.io/docs/links
+       * */
       links: [
         loggerLink({
           enabled: (opts) =>
@@ -27,6 +46,10 @@ export const trpc = createTRPCNext<AppRouter>({
       ],
     };
   },
+  /**
+   * Whether tRPC should await queries when server rendering pages
+   * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
+   */
   ssr: false,
 });
 
